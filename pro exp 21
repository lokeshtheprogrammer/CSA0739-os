#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define N 5  // number of philosophers

#define THINKING 0
#define HUNGRY 1
#define EATING 2

int state[N];  // state of each philosopher
pthread_mutex_t mutex;
pthread_cond_t cond[N];  // one condition variable for each philosopher

void test(int i);
void pickup_forks(int i);
void return_forks(int i);
void *philosopher(void *arg);

int main() {
    int i;
    pthread_t tid[N];

    // initialize mutex and condition variables
    pthread_mutex_init(&mutex, NULL);
    for (i = 0; i < N; i++) {
        pthread_cond_init(&cond[i], NULL);
    }

    // create philosopher threads
    for (i = 0; i < N; i++) {
        pthread_create(&tid[i], NULL, philosopher, (void *)(intptr_t)i);
    }

    // join philosopher threads
    for (i = 0; i < N; i++) {
        pthread_join(tid[i], NULL);
    }

    // destroy mutex and condition variables
    pthread_mutex_destroy(&mutex);
    for (i = 0; i < N; i++) {
        pthread_cond_destroy(&cond[i]);
    }

    return 0;
}

void test(int i) {
    if (state[i] == HUNGRY && state[(i+4) % N] != EATING && state[(i+1) % N] != EATING) {
        state[i] = EATING;
        printf("Philosopher %d is EATING\n", i+1);
        pthread_cond_signal(&cond[i]);
    }
}

void pickup_forks(int i) {
    pthread_mutex_lock(&mutex);
    state[i] = HUNGRY;
    printf("Philosopher %d is HUNGRY\n", i+1);
    test(i);
    pthread_mutex_unlock(&mutex);
    pthread_cond_wait(&cond[i], &mutex);
}

void return_forks(int i) {
    pthread_mutex_lock(&mutex);
    state[i] = THINKING;
    printf("Philosopher %d is THINKING\n", i+1);
    test((i+4) % N);
    test((i+1) % N);
    pthread_mutex_unlock(&mutex);
}

void *philosopher(void *arg) {
    int i = (intptr_t)arg;
    while (1) {
        printf("Philosopher %d is THINKING\n", i+1);
        sleep(2);
        pickup_forks(i);
        sleep(1);
        return_forks(i);
    }
    return NULL;
}#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define N 5  // number of philosophers

#define THINKING 0
#define HUNGRY 1
#define EATING 2

int state[N];  // state of each philosopher
pthread_mutex_t mutex;
pthread_cond_t cond[N];  // one condition variable for each philosopher

void test(int i);
void pickup_forks(int i);
void return_forks(int i);
void *philosopher(void *arg);

int main() {
    int i;
    pthread_t tid[N];

    // initialize mutex and condition variables
    pthread_mutex_init(&mutex, NULL);
    for (i = 0; i < N; i++) {
        pthread_cond_init(&cond[i], NULL);
    }

    // create philosopher threads
    for (i = 0; i < N; i++) {
        pthread_create(&tid[i], NULL, philosopher, (void *)(intptr_t)i);
    }

    // join philosopher threads
    for (i = 0; i < N; i++) {
        pthread_join(tid[i], NULL);
    }

    // destroy mutex and condition variables
    pthread_mutex_destroy(&mutex);
    for (i = 0; i < N; i++) {
        pthread_cond_destroy(&cond[i]);
    }

    return 0;
}

void test(int i) {
    if (state[i] == HUNGRY && state[(i+4) % N] != EATING && state[(i+1) % N] != EATING) {
        state[i] = EATING;
        printf("Philosopher %d is EATING\n", i+1);
        pthread_cond_signal(&cond[i]);
    }
}

void pickup_forks(int i) {
    pthread_mutex_lock(&mutex);
    state[i] = HUNGRY;
    printf("Philosopher %d is HUNGRY\n", i+1);
    test(i);
    pthread_mutex_unlock(&mutex);
    pthread_cond_wait(&cond[i], &mutex);
}

void return_forks(int i) {
    pthread_mutex_lock(&mutex);
    state[i] = THINKING;
    printf("Philosopher %d is THINKING\n", i+1);
    test((i+4) % N);
    test((i+1) % N);
    pthread_mutex_unlock(&mutex);
}

void *philosopher(void *arg) {
    int i = (intptr_t)arg;
    while (1) {
        printf("Philosopher %d is THINKING\n", i+1);
        sleep(2);
        pickup_forks(i);
        sleep(1);
        return_forks(i);
    }
    return NULL;
}#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define N 5  // number of philosophers

#define THINKING 0
#define HUNGRY 1
#define EATING 2

int state[N];  // state of each philosopher
pthread_mutex_t mutex;
pthread_cond_t cond[N];  // one condition variable for each philosopher

void test(int i);
void pickup_forks(int i);
void return_forks(int i);
void *philosopher(void *arg);

int main() {
    int i;
    pthread_t tid[N];

    // initialize mutex and condition variables
    pthread_mutex_init(&mutex, NULL);
    for (i = 0; i < N; i++) {
        pthread_cond_init(&cond[i], NULL);
    }

    // create philosopher threads
    for (i = 0; i < N; i++) {
        pthread_create(&tid[i], NULL, philosopher, (void *)(intptr_t)i);
    }

    // join philosopher threads
    for (i = 0; i < N; i++) {
        pthread_join(tid[i], NULL);
    }

    // destroy mutex and condition variables
    pthread_mutex_destroy(&mutex);
    for (i = 0; i < N; i++) {
        pthread_cond_destroy(&cond[i]);
    }

    return 0;
}

void test(int i) {
    if (state[i] == HUNGRY && state[(i+4) % N] != EATING && state[(i+1) % N] != EATING) {
        state[i] = EATING;
        printf("Philosopher %d is EATING\n", i+1);
        pthread_cond_signal(&cond[i]);
    }
}

void pickup_forks(int i) {
    pthread_mutex_lock(&mutex);
    state[i] = HUNGRY;
    printf("Philosopher %d is HUNGRY\n", i+1);
    test(i);
    pthread_mutex_unlock(&mutex);
    pthread_cond_wait(&cond[i], &mutex);
}

void return_forks(int i) {
    pthread_mutex_lock(&mutex);
    state[i] = THINKING;
    printf("Philosopher %d is THINKING\n", i+1);
    test((i+4) % N);
    test((i+1) % N);
    pthread_mutex_unlock(&mutex);
}

void *philosopher(void *arg) {
    int i = (intptr_t)arg;
    while (1) {
        printf("Philosopher %d is THINKING\n", i+1);
        sleep(2);
        pickup_forks(i);
        sleep(1);
        return_forks(i);
    }
    return NULL;
}V
